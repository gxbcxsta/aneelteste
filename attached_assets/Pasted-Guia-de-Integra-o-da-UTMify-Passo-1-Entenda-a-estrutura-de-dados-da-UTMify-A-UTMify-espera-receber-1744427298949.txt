Guia de Integração da UTMify
Passo 1: Entenda a estrutura de dados da UTMify
A UTMify espera receber os dados de pedidos em uma estrutura específica:

interface UTMifyOrder {
  orderId: string;                // ID único do pedido
  platform: string;               // Nome da plataforma/sistema
  paymentMethod: string;          // Ex: 'pix', 'credit_card', 'boleto'
  status: string;                 // Ex: 'waiting_payment', 'paid', 'refused'
  createdAt: string;              // Data de criação (ISO string)
  approvedDate: string | null;    // Data de aprovação do pagamento
  refundedAt: string | null;      // Data de reembolso (se houver)
  
  // Dados do cliente
  customer: {
    name: string;
    email: string;
    phone: string | null;
    document: string | null;      // CPF/CNPJ
    country?: string;             // Geralmente "BR" para Brasil
  };
  
  // Produtos comprados
  products: {
    id: string;
    name: string;
    planId: string | null;
    planName: string | null;
    quantity: number;
    priceInCents: number;         // Preço em centavos
  }[];
  
  // Parâmetros de rastreamento (UTMs)
  trackingParameters: {
    src: string | null;
    sck: string | null;
    utm_source: string | null;
    utm_campaign: string | null;
    utm_medium: string | null;
    utm_content: string | null;
    utm_term: string | null;
  };
  
  // Dados financeiros
  commission: {
    totalPriceInCents: number;    // Total em centavos
    gatewayFeeInCents: number;    // Taxa da gateway em centavos
    userCommissionInCents: number; // Comissão do usuário em centavos
  };
}
Passo 2: Crie uma função para capturar parâmetros UTM
function getUTMParameters() {
  const params = new URLSearchParams(window.location.search);
  return {
    src: params.get('src'),
    sck: params.get('sck'),
    utm_source: params.get('utm_source'),
    utm_campaign: params.get('utm_campaign'),
    utm_medium: params.get('utm_medium'),
    utm_content: params.get('utm_content'),
    utm_term: params.get('utm_term'),
  };
}
Passo 3: Crie uma função para enviar dados para a UTMify
async function sendOrderToUTMify(order, status) {
  const createdAt = new Date().toISOString();
  
  const utmifyOrder = {
    orderId: order.id,
    platform: "SeuSistema",
    paymentMethod: order.paymentMethod || "pix",
    status: status, // 'waiting_payment', 'paid', 'refused', etc.
    createdAt: createdAt,
    approvedDate: status === 'paid' ? createdAt : null,
    refundedAt: null,
    
    customer: {
      name: order.customerName,
      email: order.customerEmail,
      phone: order.customerPhone,
      document: order.customerDocument, // CPF/CNPJ
      country: "BR"
    },
    
    products: order.items.map(item => ({
      id: item.id.toString(),
      name: item.name,
      planId: null,
      planName: null,
      quantity: item.quantity,
      priceInCents: item.priceInCents
    })),
    
    trackingParameters: getUTMParameters(), // Função do Passo 2
    
    commission: {
      totalPriceInCents: order.total,
      gatewayFeeInCents: Math.round(order.total * 0.05), // 5% fee (exemplo)
      userCommissionInCents: Math.round(order.total * 0.95) // 95% para o vendedor
    }
  };
  
  try {
    console.log('Enviando pedido para UTMify:', utmifyOrder);
    
    const response = await fetch('https://api.utmify.com.br/api-credentials/orders', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-token': 'SUA_API_TOKEN_AQUI' // Substitua pelo token correto
      },
      body: JSON.stringify(utmifyOrder)
    });
    
    const responseText = await response.text();
    console.log('Resposta da UTMify:', response.status, responseText);
    
    if (!response.ok) {
      throw new Error(Erro: ${response.status} - ${responseText});
    }
    
    return responseText;
  } catch (error) {
    console.error('Falha ao enviar para UTMify:', error);
    throw error;
  }
}
Passo 4: Integre no fluxo de pagamentos do seu sistema
Chame a função sendOrderToUTMify após confirmar um pagamento, por exemplo:

// Após receber confirmação de pagamento
const order = {
  id: "12345",
  customerName: "Cliente Exemplo",
  customerEmail: "cliente@exemplo.com",
  customerPhone: "11999998888",
  customerDocument: "12345678900",
  total: 3990, // Total em centavos (R$ 39,90)
  paymentMethod: "pix",
  items: [
    {
      id: "1",
      name: "Produto 1",
      quantity: 2,
      priceInCents: 1995 // R$ 19,95 em centavos
    }
  ]
};
// Enviar para UTMify quando o pagamento for concluído
sendOrderToUTMify(order, "paid")
  .then(() => {
    console.log("Pedido registrado na UTMify com sucesso");
  })
  .catch(error => {
    console.error("Erro ao registrar na UTMify:", error);
  });
Passo 5: Dicas importantes para implementação
Armazene UTMs na primeira visita: Guarde os parâmetros UTM em localStorage/cookies quando o usuário chegar ao site.

Valores em centavos: A UTMify espera valores em centavos (R$ 39,90 = 3990).

Documentação: A documentação completa da API está em https://utmify.com.br/api-docs.

Token de API: Você precisará de um token de API válido, solicitado através do painel da UTMify.

Tratamento de erros: Implemente logs detalhados para depurar problemas de integração.

Status de pagamento: Atualize o status na UTMify quando o status do pedido mudar (de "aguardando" para "pago", por exemplo).

Esta é uma implementação básica que pode ser adaptada para qualquer sistema de e-commerce ou pagamentos, independente da linguagem ou framework utilizado.