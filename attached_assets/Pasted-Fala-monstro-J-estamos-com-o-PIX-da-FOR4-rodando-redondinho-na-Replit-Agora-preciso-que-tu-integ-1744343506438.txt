Fala, monstro. Já estamos com o PIX da FOR4 rodando redondinho na Replit. Agora preciso que tu integre a UTMIFY pra rastrear conversões direto no back e via pixel no front.

Segue os passos que você precisa implementar:

✅ 1. Adicionar o script da UTMIFY no <head> de todas as páginas
No index.html, layout.ejs, views/layout.pug ou onde for o layout global:

html
Copiar
Editar
<!-- UTMIFY Pixel Script -->
<script
  src="https://cdn.utmify.com.br/scripts/utms/latest.js"
  data-utmify-prevent-subids
  async
  defer
></script>

<script>
  window.pixelId = "67f81e2d256556cd68218366";
  var a = document.createElement("script");
  a.setAttribute("async", "");
  a.setAttribute("defer", "");
  a.setAttribute("src", "https://cdn.utmify.com.br/scripts/pixel/pixel.js");
  document.head.appendChild(a);
</script>
Esse script substitui o pixel do Facebook e captura automaticamente os parâmetros UTM de tráfego pago.

✅ 2. Criar arquivo utmify.js com função de envio para API
Cria o arquivo utmify.js com o seguinte conteúdo:

js
Copiar
Editar
const fetch = require('node-fetch');

const UTMIFY_TOKEN = process.env.UTMIFY_API_TOKEN || "XAo52G3UkJ6ePs7Aq3UqHs32hvDPZ8rjUog4";

async function enviarConversaoUTMIFY(pagamento, utms) {
  const payload = {
    orderId: pagamento.id,
    platform: "ReplitChaosSystem",
    paymentMethod: "pix",
    status: "paid",
    createdAt: pagamento.createdAt || new Date().toISOString(),
    approvedDate: new Date().toISOString(),
    customer: {
      name: pagamento.name,
      email: pagamento.email,
      phone: pagamento.phone,
      document: pagamento.cpf,
      country: "BR",
      ip: pagamento.ip || "8.8.8.8"
    },
    products: [
      {
        id: "TRE_PIX",
        name: "Taxa de Regularização Energética (TRE)",
        planId: null,
        planName: null,
        quantity: 1,
        priceInCents: pagamento.amount
      }
    ],
    trackingParameters: {
      utm_source: utms.utm_source || null,
      utm_campaign: utms.utm_campaign || null,
      utm_medium: utms.utm_medium || null,
      utm_content: utms.utm_content || null,
      utm_term: utms.utm_term || null
    },
    commission: {
      totalPriceInCents: pagamento.amount,
      gatewayFeeInCents: 300,
      userCommissionInCents: pagamento.amount - 300
    }
  };

  console.log("[UTMIFY] Enviando conversão:", payload);

  const response = await fetch("https://api.utmify.com.br/api-credentials/orders", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "x-api-token": UTMIFY_TOKEN
    },
    body: JSON.stringify(payload)
  });

  if (!response.ok) {
    const erro = await response.text();
    console.error("[UTMIFY] Falhou:", erro);
  } else {
    console.log("[UTMIFY] Conversão enviada com sucesso.");
  }
}

module.exports = { enviarConversaoUTMIFY };
✅ 3. Criar endpoint ou hook no backend para chamar a função acima quando o pagamento for aprovado
Exemplo simples:

js
Copiar
Editar
const { enviarConversaoUTMIFY } = require("./utmify");

app.post("/api/pagamentos/webhook", async (req, res) => {
  const pagamento = req.body;

  if (pagamento.status === "APPROVED") {
    const utms = {
      utm_source: req.query.utm_source,
      utm_campaign: req.query.utm_campaign,
      utm_medium: req.query.utm_medium,
      utm_content: req.query.utm_content,
      utm_term: req.query.utm_term
    };

    await enviarConversaoUTMIFY(pagamento, utms);
  }

  res.sendStatus(200);
});
✅ 4. Criar variável de ambiente no Replit
No .env:

ini
Copiar
Editar
UTMIFY_API_TOKEN=XAo52G3UkJ6ePs7Aq3UqHs32hvDPZ8rjUog4